---
title:  "What To Do?"
date:   2020-04-23 15:00:00 -0700
---

For some reason, you might have some free time. Maybe you're facing
unexpected unemployment for this summer. Maybe your plans of traveling
and eating your way through Mexico got canceled. What can you do
instead?

# Projects

Side projects are a great usage of down time. I've already written
about the general process of starting a [side
project](https://blog.torchnyu.com/2019/12/21/side-projects.html). Here's
a few specific projects to get you started.

## Personal Website

A personal site is a great way to improve your web development skills
and create an online presence for yourself. What's great about a
personal website is that you can constantly remake it. I've made and
remade my personal site quite a few times. I've done it in raw HTML,
in Jekyll and in React. Each time it taught me some new part of web
development.

In theory a personal site is useful when applying for jobs because
people can look at it and get a feel for how awesome you are. I've
never received any evidence that any hiring people have looked at my
website, but hey it's still nice to make.

**Basic:** Create a site with a static site generator like
  [Hugo](https://gohugo.io/) or [Jekyll](https://jekyllrb.com/)

**Intermediate:** Create a site with raw HTML and CSS

**Advanced:** Create a site with React/Vue/Angular

## Blog

Another common web dev project. I've done a few iterations of these,
including the blog you're currently reading. You can use a static site
generator, such as Jekyll, which this site uses. You can use a dynamic
framework like Rails. Heck you could just write plain HTML!

Building a blog in Rails is a great way to learn it. It's the tutorial
that the [official Rails
documentation](https://guides.rubyonrails.org/getting_started.html)
follows. Maintaining a Rails blog? Kinda annoying. But then you can
remake the blog with Jekyll or Hugo.

**Basic:** Make a blog with Hugo or Jekyll

**Intermediate:** Make a blog with Rails

**Advanced:** Make a blog with Node/Go/Rust/etc.

## Interpreter/Compiler

Writing an interpreter or compiler is a crucial rite of passage for a
programmer. Yet NYU doesn't teach it in the regular undergraduate CS
curriculum. Honestly it's a pretty large hole in the CS curriculum.

This may seem a little daunting. Programmers tend to think of the
compilers/interpreters that they use every day (javac, clang, gcc,
node, python, ruby) as black boxes. But hey Rome wasn't built in a
day.

Fortunately there's some great resources out there! Namely [Crafting
Interpreters](http://www.craftinginterpreters.com/). Crafting
Interpreters is a wonderful book on writing an interpreter. It's
completely free online and extremely easy to understand. Plus it uses
Java so you really don't need too much experience to get started.

After playing with Crafting Interpreters you can strike out on your
own. There's a bunch of info on interpreters and compilers on the
internet, of varying quality. [Eli
Bendersky](https://eli.thegreenplace.net/) and [Lambda the
Ultimate](http://lambda-the-ultimate.org/) are good blogs although
I'll admit I don't always understand their posts. You could follow
other tutorials like [Kaleidoscope](https://llvm.org/docs/tutorial/).

Compilers are slightly trickier than interpreters in my
experience. There's a lot of complications around typechecking and
code generation. The best way to get started is to look at other
compilers such as
[TypeScript](https://github.com/microsoft/typescript),
[Rust](https://github.com/rust-lang/rust) and start writing code.

**Basic:** Follow Crafting Interpreters and write the JLox and CLox implementation

**Intermediate:** Follow Crafting interpreters and write a Lox
  implementation in a different language

**Advanced:** Write an interpreter or compiler for your own language.

## Open Source

Contributing to open source is another great way to get experience and
gain some connections. Chances are you use open source software all
the time. Pick one piece of software, whether that's Python,
PostgreSQL, React, Redux, etc. and find the repository. Usually it's
on GitHub. The repository will often have a document called
CONTRIBUTING.md that explains how to contribute. If not, try getting
on contact with one of the maintainers. You can look for GitHub issues
tagged with something along the lines of Good First Issue.

Another good pathway to open source is finding bugs. I've had
situations where I'm using a library and come across some
problem. Maybe there aren't TypeScript definitions. Maybe there's a
bug. Maybe the author hasn't extended it to my usecases. Either way,
this is a perfect time to submit a pull request to fix this problem.

Your friends' and classmates' projects also count as open source
projects! For instance you can contribute to
[Schedge](https://github.com/BUGS-NYU/schedge), an API for Albert. Or
take one of your projects and make it open source! Usually that means
giving it a license, creating a contribution guide and reaching out to
potential collaborators.

**Basic:** Work on your friend's open source project

**Intermediate:** Find a largish open source project and work on it

**Advanced:** Create your own open source project

# Media

There's quite a lot of good programming related media, i.e. books,
talks, etc. I've gone over some good programming reading
[before](https://blog.torchnyu.com/2020/02/10/how-much-do-you-read.html). Here's
some more options

## Talks

Talks are a great way to get info about specific technologies, general
philosophies on development or even on the history of
programming. Here's some of my favorite talks:

* [Performance Matters](https://www.youtube.com/watch?v=r-TLSBdHe1A) by Emery Berger

This is the perfect combo of real world programming combined with
mostly rigorous math. Plus it's just entertaining. Even if you don't
care about performance, you should watch this talk.

* [The Birth & Death of JavaScript](https://www.destroyallsoftware.com/talks/the-birth-and-death-of-javascript)

Gary Bernhardt talks are always a good bet. This talk manages to be
funny, interesting and remarkably prescient. You could argue that it
anticipates both WASM and Docker.

* [Why Do Keynote Speakers Keep Suggesting That Improving Security Is
  Possible?](https://www.youtube.com/watch?v=ajGX7odA87k)

I just watched this and oh man it's great. Hilarious, informative and
a good wake-up call for those of us who are guilty of some
STEM-chauvinism.

* [What the heck is the event loop anyway?](https://www.youtube.com/watch?v=8aGhZQkoFbQ)

Every ~~JavaScript~~ programmer should know how single threaded
concurrency works. It's an incredibly powerful concept and important
for:

* [Concurrency Is Not Parallelism](https://www.youtube.com/watch?v=cN_DpYBzKso)

Rob Pike has quite a few good talks. He isn't always right about
certain topics \*cough\* GOPATH \*cough\* but he's undeniably wise and
always has something useful to say. I hear far too many people confuse
parallelism with concurrency. You should be able to rattle off an
example of a parallel but not concurrent and a concurrent but not
parallel program.

* [Go Proverbs](https://www.youtube.com/watch?v=PAAkCSZUG1c)

Every good language should have a philosophy. I agree with some parts
and disagree with others, but I have to respect the clarity and
coherence to Go's philosophy.

But these are just the beginning! If you want more, search around
[Hacker News](https://news.ycombinator.com/) or
[/r/programming](https://old.reddit.com/r/programming/) for posts on
the best talks.

## Blogs

I've talked about blogs before in my [reading
post](https://blog.torchnyu.com/2020/02/10/how-much-do-you-read.html). Here's
a quick recap of blogs you should consider reading:

For general software development: [Coding
Horror](https://blog.codinghorror.com/), [Joel on
Software](https://www.joelonsoftware.com/), [Steve
Yegge](http://steve-yegge.blogspot.com/), [Dan Luu](https://danluu.com/)

For insanely niche info on Windows and other Microsoft products: [The
Old New Thing](https://devblogs.microsoft.com/oldnewthing/)

For functional programming: [Lambda the
Ultimate](http://lambda-the-ultimate.org/), [Alexis
King](https://lexi-lambda.github.io/index.html)

For startup, Lisp and other technology: [Paul
Graham](http://www.paulgraham.com/articles.html).

## Books

Some lists: [Austin
Z. Henley](http://web.eecs.utk.edu/~azh/blog/booksformystudents.html),
[Jeff
Atwood](https://blog.codinghorror.com/recommended-reading-for-developers/)

My additions to the list:

* [Coders At Work](http://www.codersatwork.com/)
* [The Soul of a New
Machine](https://en.wikipedia.org/wiki/The_Soul_of_a_New_Machine)
* [Smart and Gets Things
Done](https://www.amazon.com/Smart-Gets-Things-Done-Technical/dp/1590598385)
* [Structure And Interpretation of Computer Programs](https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book.html)
* [How To Design Programs](https://htdp.org/)

# Non-CS Stuff

* Go for a walk! You can still go outside in most places, just stay away from people/wear a mask.
* Watch some movies! Kanopy is free for NYU students. Some
	recommendations on Kanopy:
	- Ida
	- Three Colors: Blue
	- Three Colors: White
	- Three Colors: Red
	- Pather Panchali
	- Cleo from 5 to 7
	- Il Posto
	- La Notte
* Read some non-technical books!
* Cook! [J. Kenji Lopez-Alt](https://www.youtube.com/user/kenjialt),
  [Bon Appetit](https://www.youtube.com/user/BonAppetitDotCom),
  [Serious Eats](https://seriouseats.com) and [NYT
  Cooking](https://cooking.nytimes.com/) are great resources for
  cooking. I've also started reading [Salt Fat Acid
  Heat](https://www.amazon.com/Salt-Fat-Acid-Heat-Mastering-ebook/dp/B01HMXV0UQ/)
  which teaches the fundamentals
  wonderfully. [Maangchi](https://www.maangchi.com/) is great for
  Korean food too.


